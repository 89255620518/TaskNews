import { useState, useEffect } from 'react';
import { useAuth } from '../../../useContext/AuthContext';
import { api } from '../../../api/api';
import styles from './manager.module.scss';
import ActiveRentals from './management/activeRentals';
import ClientsManagement from './management/clientsManagement';
import PropertiesManagement from './management/objectManagement';
import RentalRequests from './management/rentalRequests';

const ManagerComponent = () => {
  const { token, user, isManager, isAuthenticated } = useAuth();
  const [currentSection, setCurrentSection] = useState('requests');
  const [managerData, setManagerData] = useState(null);
  const [accessDenied, setAccessDenied] = useState(false);
  const [error, setError] = useState('');
  const [stats, setStats] = useState(null);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (!token || !isAuthenticated) {
      setError('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      setAccessDenied(true);
      setTimeout(() => {
        window.location.href = '/login';
      }, 3000);
      return;
    }

    if (user && !isManager()) {
      setError('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞–∑–¥–µ–ª—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞');
      setAccessDenied(true);
      setTimeout(() => {
        window.location.href = '/login';
      }, 3000);
      return;
    }

    if (user && isManager()) {
      setManagerData({
        name: `${user.lastName || ''} ${user.firstName || ''}`.trim(),
        email: user.email || '',
        role: user.role || 'manager',
        lastLogin: new Date().toLocaleString('ru-RU')
      });
      loadStats();
    }
  }, [token, user, isManager, isAuthenticated]);

  const loadStats = async () => {
    try {
      setLoading(true);
      const [propertiesResponse, usersResponse] = await Promise.all([
        api.properties.getAllProperties(),
        api.users.getAll()
      ]);
      
      const properties = propertiesResponse.data?.data || propertiesResponse.data || [];
      const users = usersResponse.data?.users || usersResponse.data || [];
      
      const activeProperties = Array.isArray(properties) 
        ? properties.filter(prop => prop.status === 'active')
        : [];
      const rentalProperties = activeProperties.filter(prop => prop.category === 'rent');
      const clients = Array.isArray(users) 
        ? users.filter(u => u.role === 'user')
        : [];
      
      setStats({
        totalProperties: activeProperties.length,
        rentalProperties: rentalProperties.length,
        totalClients: clients.length,
        pendingRequests: 5,
        activeRentals: 12
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    } finally {
      setLoading(false);
    }
  };

  const getRoleDisplay = (role) => {
    const roleMap = {
      'user': '–ö–ª–∏–µ–Ω—Ç',
      'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∫–æ–º–ø–∞–Ω–∏–∏',
      'manager': '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –∞—Ä–µ–Ω–¥–µ',
      'support': '–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏'
    };
    return roleMap[role] || role;
  };

  if (accessDenied) {
    return (
      <div className={styles.managerContainer}>
        <div className={styles.accessDenied}>
          <h2>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</h2>
          <p>{error || '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞–∑–¥–µ–ª—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞'}</p>
          <p>–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...</p>
        </div>
      </div>
    );
  }

  if (!managerData) {
    return (
      <div className={styles.managerContainer}>
        <div className={styles.loading}>–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–Ω–µ–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞...</div>
      </div>
    );
  }

  return (
    <div className={styles.managerContainer}>
      <div className={styles.managerHeader}>
        <h1 className={styles.managerTitle}>–ü–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –∞—Ä–µ–Ω–¥–µ</h1>
        
        <div className={styles.managerInfo}>
          <p><strong>–ú–µ–Ω–µ–¥–∂–µ—Ä:</strong> {managerData.name}</p>
          <p><strong>Email:</strong> {managerData.email}</p>
          <p><strong>–†–æ–ª—å:</strong> {getRoleDisplay(managerData.role)}</p>
          <p><strong>–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è:</strong> {managerData.lastLogin}</p>
        </div>

        {stats && (
          <div className={styles.statsGrid}>
            <div className={styles.statCard}>
              <div className={styles.statIcon}>üè†</div>
              <div className={styles.statInfo}>
                <h3>{stats.totalProperties}</h3>
                <p>–í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤</p>
              </div>
            </div>
            <div className={styles.statCard}>
              <div className={styles.statIcon}>üîë</div>
              <div className={styles.statInfo}>
                <h3>{stats.rentalProperties}</h3>
                <p>–î–ª—è –∞—Ä–µ–Ω–¥—ã</p>
              </div>
            </div>
            <div className={styles.statCard}>
              <div className={styles.statIcon}>üë•</div>
              <div className={styles.statInfo}>
                <h3>{stats.totalClients}</h3>
                <p>–ö–ª–∏–µ–Ω—Ç–æ–≤</p>
              </div>
            </div>
            <div className={styles.statCard}>
              <div className={styles.statIcon}>üìã</div>
              <div className={styles.statInfo}>
                <h3>{stats.pendingRequests}</h3>
                <p>–ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫</p>
              </div>
            </div>
          </div>
        )}

        <div className={styles.managerNavigation}>
          <button 
            className={`${styles.navButton} ${currentSection === 'requests' ? styles.active : ''}`}
            onClick={() => setCurrentSection('requests')}
          >
            üìã –ó–∞—è–≤–∫–∏ –Ω–∞ –∞—Ä–µ–Ω–¥—É
          </button>
          <button 
            className={`${styles.navButton} ${currentSection === 'clients' ? styles.active : ''}`}
            onClick={() => setCurrentSection('clients')}
          >
            üë• –ö–ª–∏–µ–Ω—Ç—ã
          </button>
          <button 
            className={`${styles.navButton} ${currentSection === 'properties' ? styles.active : ''}`}
            onClick={() => setCurrentSection('properties')}
          >
            üè† –û–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
          </button>
          <button 
            className={`${styles.navButton} ${currentSection === 'rentals' ? styles.active : ''}`}
            onClick={() => setCurrentSection('rentals')}
          >
            üìÑ –ê–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã
          </button>
        </div>
      </div>

      <div className={styles.managerContent}>
        {currentSection === 'requests' && <RentalRequests />}
        {currentSection === 'clients' && <ClientsManagement />}
        {currentSection === 'properties' && <PropertiesManagement />}
        {currentSection === 'rentals' && <ActiveRentals />}
      </div>
    </div>
  );
};

export default ManagerComponent;