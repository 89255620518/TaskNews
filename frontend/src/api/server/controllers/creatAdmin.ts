import { User } from "../models/User";

const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const question = (prompt: string): Promise<string> => {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
};

const createAdminUser = async () => {
  try {
    console.log('=== –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ===\n');
    
    const email = await question('–í–≤–µ–¥–∏—Ç–µ email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ');
    const password = await question('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω. 6 —Å–∏–º–≤–æ–ª–æ–≤): ');
    const firstName = await question('–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ');
    const lastName = await question('–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é: ');
    const phoneNumber = await question('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): ');

    if (!email || !password || !firstName || !lastName) {
      console.log('\n‚ùå –û—à–∏–±–∫–∞: –í—Å–µ –ø–æ–ª—è –∫—Ä–æ–º–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
      rl.close();
      return;
    }

    if (password.length < 6) {
      console.log('\n‚ùå –û—à–∏–±–∫–∞: –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
      rl.close();
      return;
    }

    const existingUser = await User.findOne({ where: { email } });
    if (existingUser) {
      console.log('\n‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      rl.close();
      return;
    }

    const adminUser = await User.create({
      firstName,
      lastName,
      email,
      password,
      phoneNumber: phoneNumber || '',
      role: 'admin' as const
    });

    console.log('\n‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
    console.log('üìã –î–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:');
    console.log(`   ID: ${adminUser.id}`);
    console.log(`   –ò–º—è: ${adminUser.firstName} ${adminUser.lastName}`);
    console.log(`   Email: ${adminUser.email}`);
    console.log(`   –†–æ–ª—å: ${adminUser.role}`);
    console.log(`   –¢–µ–ª–µ—Ñ–æ–Ω: ${adminUser.phoneNumber || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
    console.log(`   –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${adminUser.createdAt}`);
    console.log('\nüí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —á–µ—Ä–µ–∑ API');

  } catch (error: any) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error.message);
  } finally {
    rl.close();
  }
};

const listAdmins = async () => {
  try {
    const { rows: users } = await User.findAndCountAll();
    const admins = users.filter(user => user.role === 'admin');
    
    console.log('\n=== –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã ===');
    
    if (admins.length === 0) {
      console.log('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    admins.forEach(admin => {
      console.log(`\nüë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä #${admin.id}:`);
      console.log(`   –ò–º—è: ${admin.firstName} ${admin.lastName}`);
      console.log(`   Email: ${admin.email}`);
      console.log(`   –¢–µ–ª–µ—Ñ–æ–Ω: ${admin.phoneNumber || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
      console.log(`   –°–æ–∑–¥–∞–Ω: ${admin.createdAt}`);
    });

  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:', error.message);
  }
};

const deleteAdmin = async () => {
  try {
    const adminId = await question('\n–í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ');
    const id = parseInt(adminId);

    if (isNaN(id)) {
      console.log('‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID');
      return;
    }

    const admin = await User.findByPk(id);
    
    if (!admin) {
      console.log('‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    if (admin.role !== 'admin') {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
      return;
    }

    const confirm = await question(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ${admin.firstName} ${admin.lastName} (ID: ${admin.id})? (y/N): `);
    
    if (confirm.toLowerCase() !== 'y') {
      console.log('–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
      return;
    }

    await admin.destroy();
    console.log('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');

  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error.message);
  }
};

const showMenu = async () => {
  console.log('\n=== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ ===');
  console.log('1. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
  console.log('2. –ü–æ–∫–∞–∑–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤');
  console.log('3. –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
  console.log('4. –í—ã—Ö–æ–¥');

  const choice = await question('\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-4): ');

  switch (choice) {
    case '1':
      await createAdminUser();
      break;
    case '2':
      await listAdmins();
      break;
    case '3':
      await deleteAdmin();
      break;
    case '4':
      console.log('–í—ã—Ö–æ–¥...');
      rl.close();
      return;
    default:
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä');
  }

  if (choice !== '4') {
    const continueChoice = await question('\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ');
    if (continueChoice.toLowerCase() === 'y') {
      await showMenu();
    } else {
      console.log('–í—ã—Ö–æ–¥...');
      rl.close();
    }
  }
};

if (require.main === module) {
  console.log('üöÄ –°–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏');
  showMenu().catch(error => {
    console.error('–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    rl.close();
  });
}

rl.on('close', () => {
  console.log('\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!');
  process.exit(0);
});

export { createAdminUser, listAdmins, deleteAdmin };